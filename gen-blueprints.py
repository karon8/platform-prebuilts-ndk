import os


def local_path(path):
    return os.path.normpath(os.path.join(os.path.dirname(__file__), path))


def find(path, names):
    found = []
    for root, _, files in os.walk(path):
        for file_name in files:
            if file_name in names:
                abspath = os.path.abspath(os.path.join(root, file_name))
                rel_to_root = abspath.replace(os.path.abspath(path), '')
                found.append(rel_to_root[1:])  # strip leading /
    return found


def sdk_version_from_path(path):
    return int(path.split('/')[0].split('-')[1])


def get_prebuilts(names):
    prebuilts_path = local_path('current/platforms')
    prebuilts = find(prebuilts_path, names)
    prebuilts = [p for p in prebuilts if 'arch-arm/' in p]
    prebuilts.sort(key=sdk_version_from_path)
    return prebuilts


def gen_lib_prebuilt(prebuilt, name, version):
    platform = os.path.join('current', 'platforms',
                            prebuilt.partition('/')[0])
    includes = os.path.join(platform, 'arch-{}/usr/include')
    arch_flags = []
    for arch in ['arm', 'arm64', 'mips', 'mips64', 'x86', 'x86_64']:
        inc = includes.format(arch)
        arch_flags.append(
            '        {arch}: {{\n'
            '            export_include_dirs: ["{includes}"],\n'
            '        }},'.format(arch=arch, includes=inc))
    return ('ndk_prebuilt_library {{\n'
            '    name: "ndk_{name}.{version}",\n'
            '    sdk_version: "{version}",\n'
            '    arch: {{\n{arch_flags}\n'
            '    }},\n'
            '}}'.format(name=name, version=version,
                        arch_flags='\n'.join(arch_flags)))


def gen_crt_prebuilt(_, name, version):
    return ('ndk_prebuilt_object {{\n'
            '    name: "ndk_{name}.{version}",\n'
            '    sdk_version: "{version}",\n'
            '}}'.format(name=name, version=version))


def gen_prebuilts(fn, names):
    prebuilts = []
    for prebuilt in get_prebuilts(names):
        name = os.path.splitext(os.path.basename(prebuilt))[0]
        version = sdk_version_from_path(prebuilt)
        prebuilts.append(fn(prebuilt, name, version))
    return prebuilts


def main():
    blueprints = gen_prebuilts(gen_lib_prebuilt, ('libc.so', 'libm.so'))
    blueprints.extend(gen_prebuilts(gen_crt_prebuilt, (
        'crtbegin_so.o',
        'crtend_so.o',
        'crtbegin_dynamic.o',
        'crtbegin_static.o',
        'crtend_android.o')))

    with open(local_path('Blueprints'), 'w') as f:
        f.write('// THIS FILE IS AUTOGENERATED BY gen-blueprints.py\n')
        f.write('// DO NOT EDIT\n')
        f.write('\n')
        f.write('\n\n'.join(blueprints))
        f.write('\n\n')
        f.write(open(local_path('stl.bp')).read())


if __name__ == '__main__':
    main()
