import os


def find(path, names):
    found = []
    for root, _, files in os.walk(path):
        for file_name in files:
            if file_name in names:
                abspath = os.path.abspath(os.path.join(root, file_name))
                rel_to_root = abspath.replace(os.path.abspath(path), '')
                found.append(rel_to_root[1:])  # strip leading /
    return found


def sdk_version_from_path(path):
    return int(path.split('/')[0].split('-')[1])


def main():
    this_dir = os.path.dirname(__file__)
    prebuilts_path = os.path.join(this_dir, 'current', 'platforms')
    prebuilts = find(prebuilts_path, ('libc.so', 'libm.so'))
    prebuilts = [p for p in prebuilts if 'arch-arm/' in p]
    prebuilts.sort(key=sdk_version_from_path)

    blueprints = []
    for prebuilt in prebuilts:
        libname = os.path.splitext(os.path.basename(prebuilt))[0]
        sdk_version = sdk_version_from_path(prebuilt)
        platform = os.path.join('current', 'platforms',
                                prebuilt.partition('/')[0])
        includes = os.path.join(platform, 'arch-{}/usr/include')
        arch_flags = []
        for arch in ['arm', 'arm64', 'mips', 'mips64', 'x86', 'x86_64']:
            inc = includes.format(arch)
            arch_flags.append(
                '        {arch}: {{\n'
                '            export_include_dirs: ["{includes}"],\n'
                '        }},'.format(arch=arch, includes=inc))
        blueprints.append(
            'ndk_prebuilt_library {{\n'
            '    name: "ndk_{name}.{version}",\n'
            '    sdk_version: "{version}",\n'
            '    arch: {{\n{arch_flags}\n'
            '    }},\n'
            '}}'.format(name=libname, version=sdk_version,
                        arch_flags='\n'.join(arch_flags)))
    with open(os.path.join(this_dir, 'Blueprints'), 'w') as f:
        f.write('// THIS FILE IS AUTOGENERATED BY gen-blueprints.py\n')
        f.write('// DO NOT EDIT\n')
        f.write('\n')
        f.write('\n\n'.join(blueprints))
        f.write('\n\n')
        f.write(open(os.path.join(this_dir, 'stl.bp')).read())


if __name__ == '__main__':
    main()
